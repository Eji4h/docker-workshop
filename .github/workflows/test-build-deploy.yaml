name: Test & Build & Deploy

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false
      
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: ci-cd-demo/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ./ci-cd-demo
        run: pnpm i --frozen-lockfile

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store

      - run: pnpm lint
        working-directory: ./ci-cd-demo
      - run: pnpm test:cov
        working-directory: ./ci-cd-demo

      - name: Upload test coverage artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: ci-cd-demo/coverage

  release-tag:
    runs-on: ubuntu-22.04
    needs: test
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      new_release_published: ${{ steps.tag.outputs.new_release_published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Semantic release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          working_directory: ./ci-cd-demo

      - name: Tag
        id: tag
        run: |
          echo "new_release_published=${{ steps.semantic.outputs.new_release_published }}" >> $GITHUB_OUTPUT
          TAG=${{ steps.semantic.outputs.new_release_version }}
          echo $TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  build-image:
    runs-on: ubuntu-22.04
    needs: release-tag
    env: 
      build-platforms: amd64
      docker-image: jitrak/ci-cd-demo
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.build-platforms }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./ci-cd-demo
          platforms: ${{ env.build-platforms }}
          push: true
          tags: ${{ env.docker-image }}:${{ needs.release-tag.outputs.new_release_published }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-22.04
    needs: [release-tag, build-image]
    steps:
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/620479641326/locations/global/workloadIdentityPools/github/providers/my-repo
          service_account: my-service-account@kbtg-docker-426015.iam.gserviceaccount.com

      - id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ci-cd-demo
          image: jitrak/ci-cd-demo:${{ needs.release-tag.outputs.new_release_published }}
          region: asia-southeast1

      - name: 'Use output'
        run: 'curl "${{ steps.deploy.outputs.url }}"'